<?php

/*
 * This file is part of the Mce package.
 *
 * (c) Matthew Conger-Eldeen <mceldeen@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Mce\Date\Math;

use \DateTime;
use \Mce\Date\Range\Inclusive as InclusiveRange;

/**
 * Test class for Math.
 * Generated by PHPUnit on 2012-05-16 at 20:38:16.
 */
class WeekOfMonthTest extends \PHPUnit_Framework_TestCase
{
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp ()
    { 

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown ()
    {
        
    }

    public function testGetRangeFromDate()
    {
        $tests = array(
            'mon' => array(
                'date' => new DateTime("2013-04-01 12:00:00"),
                'range' => new InclusiveRange(
                    new DateTime('2013-03-27 00:00:00'),
                    new DateTime('2013-04-02 23:59:59')
                )
            ),
            'tue' => array(
                'date' => new DateTime("2013-01-01 12:00:00"),
                'range' => new InclusiveRange(
                    new DateTime('2012-12-26 00:00:00'),
                    new DateTime('2013-01-01 23:59:59')
                )
            ),
            'wed' => array(
                'date' => new DateTime("2013-05-01 12:00:00"),
                'range' => new InclusiveRange(
                    new DateTime('2013-05-01 00:00:00'),
                    new DateTime('2013-05-07 23:59:59')
                )
            ),
            'thu' => array(
                'date' => new DateTime("2013-08-01 12:00:00"),
                'range' => new InclusiveRange(
                    new DateTime('2013-07-31 00:00:00'),
                    new DateTime('2013-08-06 23:59:59')
                )
            ),
            'fri' => array(
                'date' => new DateTime("2013-03-01 12:00:00"),
                'range' => new InclusiveRange(
                    new DateTime('2013-02-27 00:00:00'),
                    new DateTime('2013-03-05 23:59:59')
                )
            ),
            'sat' => array(
                'date' => new DateTime("2012-12-01 12:00:00"),
                'range' => new InclusiveRange(
                    new DateTime('2012-11-28 00:00:00'),
                    new DateTime('2012-12-04 23:59:59')
                )
            ),
            'sun' => array(
                'date' => new DateTime("2013-09-01 12:00:00"),
                'range' => new InclusiveRange(
                    new DateTime('2013-08-28 00:00:00'),
                    new DateTime('2013-09-03 23:59:59')
                )
            ),
        );

        $weekStart = 3; // wed

        foreach($tests as $name => $test) {
            $range = WeekOfMonth::getRangeFromDate($test['date'], $weekStart);
            $this->assertEquals($range->getStart(), $test['range']->getStart(), $name);
            $this->assertEquals($range->getEnd(), $test['range']->getEnd(), $name);
        }
    }

    public function testGetRangeFromNumber()
    {
        // test the basic functionality
        $week = 2;
        $month = new DateTime('2013-04-01');
        $weekStart = 3;
        $expected = new InclusiveRange(
            new DateTime('2013-04-10 00:00:00'),
            new DateTime('2013-04-16 23:59:59')
        );
        $actual = WeekOfMonth::getRangeFromNumber($week, $month, $weekStart);
        $this->assertEquals($expected->getStart(), $actual->getStart());
        $this->assertEquals($expected->getEnd(), $actual->getEnd());

        // out of bounds
        $week = 5;
        $this->setExpectedException('\RangeException');
        WeekOfMonth::getRangeFromNumber($week, $month, $weekStart);
    }

    public function testGetNumber()
    {
        // test when the week is part of the current month
        $date = new DateTime('2013-04-01');
        $weekStart = 1;
        $expected = array(2013, 4, 1);

        $actual = WeekOfMonth::getNumber($date, $weekStart); 
        $this->assertEquals($expected, $actual);

        // test when the week is part of the previous month
        $weekStart = 7;
        $expected = array(2013, 3, 5);

        $actual = WeekOfMonth::getNumber($date, $weekStart); 
        $this->assertEquals($expected, $actual);
    }

    public function testGetMaxNumber()
    {
        // test when the week is part of the current month
        $date = new DateTime('2013-04-01');
        $weekStart = 3;
        $expected = 4;

        $this->assertEquals($expected, WeekOfMonth::getMaxNumber($date, $weekStart));
    }
}
?>
