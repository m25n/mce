<?php

/*
 * This file is part of the Mce package.
 *
 * (c) Matthew Conger-Eldeen <mceldeen@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Mce\File\Parse;

require_once dirname( __FILE__ ) . '/../../../../lib/Mce/File/Parse/Ini.php';
require_once __DIR__ . '/../../../../lib/Mce/File/Exception/NotFound.php';
require_once __DIR__ . '/../../../../lib/Mce/File/Exception/NotReadable.php';
require_once __DIR__ . '/../../../../lib/Mce/File/Parse/Ini/Exception/BadSection.php';

use \vfsStream as vfsStream;
use \vfsStreamDirectory as vfsStreamDirectory;
use \vfsStreamWrapper as vfsStreamWrapper;

/**
 * Test class for Ini.
 * Generated by PHPUnit on 2012-05-07 at 00:54:52.
 */
class IniTest extends \PHPUnit_Framework_TestCase {
    protected $ini;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp () {
        $this->ini= new Ini;
        $this->filename = realpath(__DIR__ . "/../../../data/test.ini");
        
        vfsStreamWrapper::register();
        vfsStreamWrapper::setRoot(new vfsStreamDirectory('root'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown () {
        unset($this->ini);
    }

    public function testFileNotFoundExceptionWithNonExistentFile() {
        $this->setExpectedException("\\Mce\\File\\Exception\\NotFound");
        $this->ini->parse(vfsStream::url('root/NonExistentFile.csv'));
    }

    public function testFileNotReadableExceptionWithNonReadableFile() {
        $this->setExpectedException("\\Mce\\File\\Exception\\NotReadable");
        vfsStream::newFile('NonReadableFile.csv', 0333)->at(vfsStreamWrapper::getRoot());
        $this->ini->parse(vfsStream::url('root/NonReadableFile.csv'));
    }
    
    public function testBadSectionExceptionWithBadSection() {
        $this->setExpectedException("\\Mce\\File\\Parse\\Ini\\Exception\\BadSection");
        $this->ini->parse($this->filename, "fakeSection");
    }
    
    public function testNoExceptionWithExtendedSection() {
        $noException = true;
        $e = null;
        try {
            $this->ini->parse($this->filename, "development");
        } catch(\Mce\File\Parse\Ini\Exception\BadSection $e) {
            $noException = false;
        }
        $this->assertTrue($noException, "The parser did not recognize a valid extended section");
    }
    
    public function testOutputCorrectValuesForNonExtendedSection() {
        $outputCorrectValues = false;
        
        $values = $this->ini->parse($this->filename, "production");
        
        if($values["app"]["timezone"]["server"] === "America/Los_Angeles") {
            $outputCorrectValues = true;
        }
        
        $this->assertTrue($outputCorrectValues, "The parser did not output the correct values.");
    }
    
    public function testInheritValueForExtendedSection() {
        $inheritedValues = false;
        
        $values = $this->ini->parse($this->filename, "development");
        
        if($values["app"]["timezone"]["db"] === "UTC") {
            $inheritedValues = true;
        }
        
        $this->assertTrue($inheritedValues, "The parser did not inherit values for the extended section.");
    }
    
    public function testNewValueOverwrittenForExtendedSection() {
        $overwroteValue = false;
        
        $values = $this->ini->parse($this->filename, "development");
        
        if($values["app"]["timezone"]["server"] === "America/Denver") {
            $overwroteValue = true;
        }
        
        $this->assertTrue($overwroteValue, "The parser did not overwrite values for the extended section.");
    }
    
    public function testInheritValuesForMultipleExtendedSection() {
        $inheritedValues = false;
        
        $values = $this->ini->parse($this->filename, "development");
        
        if($values["php"]["showErrors"] == "1" && $values["app"]["timezone"]["db"] === "UTC") {
            $inheritedValues = true;
        }
        
        $this->assertTrue($inheritedValues, "The parser did not inherit values for the multiple extended section.");
    }
    
    public function testOverwriteValuesForMultipleExtendedSection() {
        $overwroteValue = false;
        
        $values = $this->ini->parse($this->filename, "testing");
        
        if($values["app"]["timezone"]["server"] === "America/New_York") {
            $overwroteValue = true;
        }
        
        $this->assertTrue($overwroteValue, "The parser did not overwrite values for the multiple extended section.");
    }

}
?>
